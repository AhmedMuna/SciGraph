server:
  type: simple
  applicationContextPath: /scigraph
  adminContextPath: /admin
  connector:
    type: http
    port: 9000
#  requestLog:
#    timeZone: America/Los_Angeles
#    appenders: []

#server:
#  type: simple
#  applicationContextPath: /graphdemo

logging:
  level: INFO
#  loggers:
#    "http.request": ON

applicationContextPath: scigraph

#apiConfiguration:
#  apikeyParameter: apikey
#  defaultApikey: default
#  authenticationCachePolicy: maximumSize=10000, expireAfterAccess=10m
#  authenticationQuery: select APIKEY from USERS where APIKEY = ?
#  roleQuery: select ROLES from USERS where APIKEY = ?
##  permissionQuery: select PERMISSION from ROLES where ROLE = ?
#  authDataSourceFactory:
#    # the name of your JDBC driver
#    driverClass: org.hsqldb.jdbc.JDBCDriver

    # the username
#    user: SA

    # the password
#    password: password

    # the JDBC URL
#    url: jdbc:hsqldb:res:/users/users

    # any properties specific to your JDBC driver:
#    properties:
#      charSet: UTF-8

    # the maximum amount of time to wait on an empty pool before throwing an exception
#    maxWaitForConnection: 1s

    # the SQL query to run when validating a connection's liveness
#    validationQuery: "/* MyService Health Check */ SELECT 1 FROM INFORMATION_SCHEMA.SYSTEM_USERS"

    # the minimum number of connections to keep open
#    minSize: 8

    # the maximum number of connections to keep open
#    maxSize: 32

    # whether or not idle connections should be validated
#    checkConnectionWhileIdle: false

graphConfiguration:
  graphLocation: /temp/rosieGraph
  curies:
    http://purl.obolibrary.org/obo/CL_0000000 : cell
    http://purl.obolibrary.org/obo/UBERON_0001062 : anatomical entity
    http://purl.obolibrary.org/obo/UBERON_0000468 : multi-cellular organism
    http://purl.obolibrary.org/obo/PATO_0000001 : quality
    http://purl.obolibrary.org/obo/GO_0005623 : cell
    http://purl.obolibrary.org/obo/DOID_4 : disease
    http://purl.obolibrary.org/obo/PATO_0000003 : assay
    http://purl.obolibrary.org/obo/PATO_0000006 : process
    http://purl.obolibrary.org/obo/PATO_0000011 : age
    http://purl.obolibrary.org/obo/CHEBI_23367 : molecular entity
    http://purl.obolibrary.org/obo/CHEBI_23888 : drug
    http://purl.obolibrary.org/obo/UPHENO_0001001 : Phenotype
    http://purl.obolibrary.org/obo/GO_0008150 : biological process
    http://purl.obolibrary.org/obo/GO_0005575 : cellular component
    http://purl.obolibrary.org/obo/SO_0000704 : gene
    http://purl.obolibrary.org/obo/GENO_0000000 : genotype
    http://purl.obolibrary.org/obo/GENO_0000000 : intrinsic genotype
    http://purl.obolibrary.org/obo/GENO_0000524 : genotype
    http://purl.obolibrary.org/obo/GENO_0000524 : extrinsic genotype
    http://purl.obolibrary.org/obo/GENO_0000525 : genotype
    http://purl.obolibrary.org/obo/GENO_0000525 : effective genotype
    http://purl.obolibrary.org/obo/GENO_0000002 : variant locus
    http://purl.obolibrary.org/obo/SO_0001059 : sequence alteration
    http://purl.obolibrary.org/obo/SO_0000110 : sequence feature
    http://purl.obolibrary.org/obo/ECO_0000000 : evidence

cypherResources:
  - path: /dynamic/genes_with_phenotype
    query: |
            START phenotype = node:node_auto_index(fragment={phenotype_id})
            MATCH (g:gene)-[r:RO_0002200*]->(phenotype)
            RETURN distinct g, r, phenotype
    operations:
      - nickname: genes_with_phenotype
        summary: Get genes related to a phenotype
        parameters:
          - name: phenotype_id
            description: The ID of the phenotype
            required: true
            type: string
            paramType: query
  - path: /dynamic/phenotypes_with_gene
    query: |
            START gene = node:node_auto_index(fragment={gene_id})
            MATCH (gene)-[r:RO_0002200*]->(phenotype:Phenotype)
            RETURN distinct gene, r, phenotype
    operations:
      - nickname: genes_with_phenotype
        summary: Get genes related to a phenotype
        parameters:
          - name: gene_id
            description: The ID of the gene
            required: true
            type: string
            paramType: query
  - path: /dynamic/genotypes_from_gene
    query: |
            START genotypeClass = node:node_auto_index(fragment='GENO_0000000'),
                  gene = node:node_auto_index(fragment={gene_id})
                  MATCH (gene)<-[geno:GENO_0000408]-(variantLocus)<-[part:BFO_0000051!*]-(genotype)-[:type]->(genotypeClass)
                  RETURN distinct gene, geno, variantLocus, part, genotype
    operations:
      - nickname: genotypes_from_gene
        summary: Get genotypes for a gene
        parameters:
          - name: gene_id
            description: The ID of the gene
            required: true
            type: string
            paramType: query
  - path: /dynamic/phenotypes_from_disease
    query: |
            START disease = node:node_auto_index(fragment={disease_id})
            MATCH (disease)<-[s1:subClassOf*0..]-(d)-[r:RO_0002200]->(p)-[s2:subClassOf*1..]->(phenotype:Phenotype)
            RETURN distinct disease, s1, d, r, p, s2, phenotype
    operations:
      - nickname: phenotypes_from_disease
        summary: Get phenotype for a disease
        parameters:
          - name: disease_id
            description: The ID of the disease
            required: true
            type: string
            paramType: query
  - path: /dynamic/diseases_from_phenotype
    query: |
            START phenotype = node:node_auto_index(fragment={phenotype_id})
            MATCH (disease:disease)<-[s1:subClassOf*0..]-(d)-[r:RO_0002200]->(p)-[s2:subClassOf*0..]->(phenotype:Phenotype)
            RETURN distinct disease, s1, d, r, p, s2, phenotype
    operations:
      - nickname: diseases_from_phenotype
        summary: Get diseases for a phenotype
        parameters:
          - name: phenotype_id
            description: The ID of the phenotype
            required: true
            type: string
            paramType: query
  - path: /dynamic/homologs
    query: |
            START gene = node:node_auto_index(fragment={gene_id})
            MATCH (gene)-[e:equivalentClass*0..2]-(ge:gene)-[homology:${homolog_id}!]-(homolog)
            RETURN distinct gene, e, ge, homology, homolog
    operations:
      - nickname: homologs
        summary: Get homologs for a gene
        parameters:
          - name: gene_id
            description: The ID of the gene
            required: true
            type: string
            paramType: query
          - name: homolog_id
            description: The homolog relationship
            required: true
            type: string
            paramType: query


serviceMetadata:
  name: 'SciGraph Reconciliation Service'
  identifierSpace: 'http://example.org'
  schemaSpace: 'http://example.org'
  view: {
    url: 'http://localhost:9000/scigraph/refine/view/{{id}}'
  }
  preview: {
    url: 'http://localhost:9000/scigraph/refine/preview/{{id}}',
    width: 400,
    height: 400
  }
